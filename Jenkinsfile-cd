@Library('shared-library') _
pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '383375023402')
        string(name: 'region', description: "Region of ECR", defaultValue: 'eu-central-1')
        string(name: 'ecr_repo_name', description: "name of the ECR", defaultValue: 'ecr-aws-marketplace')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }

    environment{

        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_KEY_ID = credentials('AWS_SECRET_KEY_ID')
    }

    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
                gitCheckout(
                branch: "master",
                url: "https://github.com/yogeshk04/hello-springboot.git"
            )
            }
        }
/*
        stage('Create EKS Cluster : Terraform'){
                when { expression {  params.action == 'create' } }
                steps{
                    script{

                        dir('eks_module') {
                        sh """                          
                            terraform init 
                            terraform plan -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_KEY_ID' -var 'region=${params.region}' --var-file=./config/terraform.tfvars
                            terraform apply -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_KEY_ID' -var 'region=${params.region}' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }
                    }
                }
            }

        stage('Destroy EKS Cluster : Terraform'){
                when { expression {  params.action == 'create' } }
                steps{
                    script{

                        dir('eks_module') {
                        sh """
                            terraform destroy -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_KEY_ID' -var 'region=${params.region}' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }
                    }
                }
            }
 */
        stage('Connect to EKS '){
            when { expression {  params.action == 'create' } }
            steps{

                withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region eu-central-1
                        aws eks --region eu-central-1 update-kubeconfig --name demo-cluster1
                    """
                }

/*                 script{

                    sh """
                    aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
                    aws configure set aws_secret_access_key "$AWS_SECRET_KEY_ID"
                    aws configure set region "${params.region}"
                    aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                    """
                } */
            }
            } 
        stage('Deployment on EKS Cluster'){
                when { expression { params.action == 'create' } }
                steps{
                    script{
                    
                    def apply = false

                    try{
                        input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                        apply = true
                    }catch(err){
                        apply= false
                        currentBuild.result  = 'UNSTABLE'
                    }
                    if(apply){

                        sh """
                        kubectl apply -f k8s/deployment.yaml
                        """
                    }
                    }
                }
            }     
        }
}